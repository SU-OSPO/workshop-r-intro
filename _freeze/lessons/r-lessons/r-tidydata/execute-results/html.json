{
  "hash": "df85b694d910d9066a83fe324e56cd4a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R for Data Cleaning\"\nformat: html\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n \n+----------------------------------+----------------------------------+\n| ### Questions                    | ### Objectives                   |\n+==================================+==================================+\n| -   \"How can I summarize my data | -   \"To become familiar with the |\n|     in R?\"                       |     functions of `dplyr` and the |\n| -   \"How can R help make my      |     `tidyverse` suite of         |\n|     research more reproducible?\" |      packages.\"                  |\n| -   \"How can I combine two       | -   \"To use `dplyr` and the      |\n|     datasets from different      |     `tidyverse` packages to      |\n|     sources?\"                    |     prepare data for analysis.\"  |\n| -   \"How can data tidying        | -   \"To be able to combine two   |\n|     facilitate answering         |     different data sources using |\n|     analysis questions?\"         |     joins.\"                      |\n|                                  | -   \"To be able to create plots  |\n|                                  |     and summary tables to answer |\n|                                  |     analysis questions.\"         |\n+----------------------------------+----------------------------------+\n\n\n# Getting Started {#getting-started}\n\nThe [`tidyverse`](https://www.tidyverse.org/) is a collection of packages that facilitates data analysis in R. After installing the `tidyverse` with `install.packages(\"tidyverse\")` (see the [intro session](r-intro.qmd)), you can load it with:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n\n::: callout-tip\n### Tip \nUpon loading, the `tidyverse` prints a message like the one above. Notice that multiple packages (the constituent elements of the \"collection\") are actually loaded. For instance, `dplyr` and `tidyr` help with data wrangling and transformation, while `ggplot2` allows us to draw plots, as you saw in the [last session](r-plotting.qmd). Often, one just loads the `tidyverse` and ignores these details, as the individual packages are compatible with each other.\n:::\n\nThroughout this module, we will use `tidyverse` functions to load, wrangle, and visualize real data.\n\n\n# Loading data\n\nAs with the [intro session](r-intro.qmd), we'll be using the palmer penguins dataset. First, let's load the package, then save the raw data to an object using the assignment operator `<-`. Finally, inspect the raw data that is included using `glimpse()`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\npenguins_raw <- penguins_raw\nglimpse(penguins_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 17\n$ studyName             <chr> \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL0708\", \"PAL…\n$ `Sample Number`       <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ Species               <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie P…\n$ Region                <chr> \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\", \"Anvers\"…\n$ Island                <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgerse…\n$ Stage                 <chr> \"Adult, 1 Egg Stage\", \"Adult, 1 Egg Stage\", \"Adu…\n$ `Individual ID`       <chr> \"N1A1\", \"N1A2\", \"N2A1\", \"N2A2\", \"N3A1\", \"N3A2\", …\n$ `Clutch Completion`   <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n$ `Date Egg`            <date> 2007-11-11, 2007-11-11, 2007-11-16, 2007-11-16,…\n$ `Culmen Length (mm)`  <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34…\n$ `Culmen Depth (mm)`   <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18…\n$ `Flipper Length (mm)` <dbl> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190,…\n$ `Body Mass (g)`       <dbl> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 34…\n$ Sex                   <chr> \"MALE\", \"FEMALE\", \"FEMALE\", NA, \"FEMALE\", \"MALE\"…\n$ `Delta 15 N (o/oo)`   <dbl> NA, 8.94956, 8.36821, NA, 8.76651, 8.66496, 9.18…\n$ `Delta 13 C (o/oo)`   <dbl> NA, -24.69454, -25.33302, NA, -25.32426, -25.298…\n$ Comments              <chr> \"Not enough blood for isotopes.\", NA, NA, \"Adult…\n```\n\n\n:::\n:::\n\n\n\n\nWe can inspect our data by using the interface above. An alternative is to run the command `View(penguins_raw)` or click on the object in RStudio’s environment panel (in the top-right section).\n\nLet’s review the dataset’s columns:  \n\n- `studyName`: Sampling expedition from which data were collected, generated, etc.  \n- `Sample Number`: an integer denoting the continuous numbering sequence for each sample \n- `Species`:  a character string denoting the penguin species  \n- `Region`: a character string denoting the region of Palmer LTER sampling grid  \n- `Island`: a character string denoting the island near Palmer Station where samples were collected  \n- `Stage`:  a character string denoting reproductive stage at sampling  \n- `Individual ID`: a character string denoting the unique ID for each individual in dataset  \n- `Clutch Completion`: a character string denoting if the study nest observed with a full clutch, i.e., 2 eggs  \n- `Date Egg`: a date denoting the date study nest observed with 1 egg (sampled) \n- `Culmen Length`: a number denoting the length of the dorsal ridge of a bird's bill (millimeters)  \n- `Culmen Depth`: a number denoting the depth of the dorsal ridge of a bird's bill (millimeters)  \n- `Flipper Length`: an integer denoting the length penguin flipper (millimeters)  \n- `Body Mass`:  an integer denoting the penguin body mass (grams)  \n- `Sex`: a character string denoting the sex of an animal  \n- `Delta 15 N`: a number denoting the measure of the ratio of stable isotopes 15N:14N  \n- `Delta 13 C`: a number denoting the measure of the ratio of stable isotopes 13C:12C  \n- `Comments`: a character string with text providing additional relevant information for data  \n\nYou can read more about these variables by querying `?penguins_raw` and reading the **Help** documentation. \n\nThe `tidyverse` facilitates the creation and use of *tidy data*. If you can get your data to this format (and we will see ways to do this), your life will be much easier:\n\n![](fig/tidy_data.jpg)\n![](fig/tidy_data2.jpg)\n\nSource: Illustrations from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst.\n\n\n# Wrangling data with `dplyr`\n\nWe often need to modify data to conduct our analyses, e.g., creating columns, filtering rows, etc. In the `tidyverse`, these operations are conducted with multiple *verbs*, which we will review now.\n\n## Selecting columns\n\nWe can select specific columns in our dataset with the `select()` function. All `dplyr` wrangling verbs take a data frame as their first argument---in this case, the columns we want to select are the other arguments.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(penguins_raw, Species, Island, `Individual ID`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   Species                             Island    `Individual ID`\n   <chr>                               <chr>     <chr>          \n 1 Adelie Penguin (Pygoscelis adeliae) Torgersen N1A1           \n 2 Adelie Penguin (Pygoscelis adeliae) Torgersen N1A2           \n 3 Adelie Penguin (Pygoscelis adeliae) Torgersen N2A1           \n 4 Adelie Penguin (Pygoscelis adeliae) Torgersen N2A2           \n 5 Adelie Penguin (Pygoscelis adeliae) Torgersen N3A1           \n 6 Adelie Penguin (Pygoscelis adeliae) Torgersen N3A2           \n 7 Adelie Penguin (Pygoscelis adeliae) Torgersen N4A1           \n 8 Adelie Penguin (Pygoscelis adeliae) Torgersen N4A2           \n 9 Adelie Penguin (Pygoscelis adeliae) Torgersen N5A1           \n10 Adelie Penguin (Pygoscelis adeliae) Torgersen N5A2           \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\nThis is a good moment to talk about \"pipes.\" Notice how the code below produces the same output as the one above, but with a slightly different syntax. Pipes (`|>` or `%>%`) \"kick\" the object on the left of the pipe to the first argument of the function on the right. One can read pipes as \"then,\" so the code below can be read as \"take `penguins_raw`, then select the columns `Species`, `Island` and `Individual ID`.\" Pipes are very powerful and can be used to *link multiple operations*, as we will see in a moment.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  select(Species, Island, `Individual ID`) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   Species                             Island    `Individual ID`\n   <chr>                               <chr>     <chr>          \n 1 Adelie Penguin (Pygoscelis adeliae) Torgersen N1A1           \n 2 Adelie Penguin (Pygoscelis adeliae) Torgersen N1A2           \n 3 Adelie Penguin (Pygoscelis adeliae) Torgersen N2A1           \n 4 Adelie Penguin (Pygoscelis adeliae) Torgersen N2A2           \n 5 Adelie Penguin (Pygoscelis adeliae) Torgersen N3A1           \n 6 Adelie Penguin (Pygoscelis adeliae) Torgersen N3A2           \n 7 Adelie Penguin (Pygoscelis adeliae) Torgersen N4A1           \n 8 Adelie Penguin (Pygoscelis adeliae) Torgersen N4A2           \n 9 Adelie Penguin (Pygoscelis adeliae) Torgersen N5A1           \n10 Adelie Penguin (Pygoscelis adeliae) Torgersen N5A2           \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-tip\n### Tip\nYou can insert a pipe with the `Cmd/Ctrl + Shift + M` shortcut. If you have not changed the default RStudio settings, an \"old\" pipe (`%>%`) might appear. While most of the functionality is the same, the `|>` \"new\" pipes are more readable and don't need any extra packages (to use `%>%` you need the `tidyverse` or one of its packages). You can change this RStudio option in `Tools > Global Options > Code > Use native pipe operator`. \n:::\n\nGoing back to selecting columns, you can select ranges:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  select(Species:`Individual ID`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 5\n   Species                             Region Island    Stage    `Individual ID`\n   <chr>                               <chr>  <chr>     <chr>    <chr>          \n 1 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N1A1           \n 2 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N1A2           \n 3 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N2A1           \n 4 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N2A2           \n 5 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N3A1           \n 6 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N3A2           \n 7 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N4A1           \n 8 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N4A2           \n 9 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N5A1           \n10 Adelie Penguin (Pygoscelis adeliae) Anvers Torgersen Adult, … N5A2           \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\nYou can also **de**select columns using a minus sign:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  select(-Species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 16\n   studyName `Sample Number` Region Island    Stage              `Individual ID`\n   <chr>               <dbl> <chr>  <chr>     <chr>              <chr>          \n 1 PAL0708                 1 Anvers Torgersen Adult, 1 Egg Stage N1A1           \n 2 PAL0708                 2 Anvers Torgersen Adult, 1 Egg Stage N1A2           \n 3 PAL0708                 3 Anvers Torgersen Adult, 1 Egg Stage N2A1           \n 4 PAL0708                 4 Anvers Torgersen Adult, 1 Egg Stage N2A2           \n 5 PAL0708                 5 Anvers Torgersen Adult, 1 Egg Stage N3A1           \n 6 PAL0708                 6 Anvers Torgersen Adult, 1 Egg Stage N3A2           \n 7 PAL0708                 7 Anvers Torgersen Adult, 1 Egg Stage N4A1           \n 8 PAL0708                 8 Anvers Torgersen Adult, 1 Egg Stage N4A2           \n 9 PAL0708                 9 Anvers Torgersen Adult, 1 Egg Stage N5A1           \n10 PAL0708                10 Anvers Torgersen Adult, 1 Egg Stage N5A2           \n# ℹ 334 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n\n\n\nAnd use a few helper functions, like `matches()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  select(Species, matches(\"Length\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   Species                            `Culmen Length (mm)` `Flipper Length (mm)`\n   <chr>                                             <dbl>                 <dbl>\n 1 Adelie Penguin (Pygoscelis adelia…                 39.1                   181\n 2 Adelie Penguin (Pygoscelis adelia…                 39.5                   186\n 3 Adelie Penguin (Pygoscelis adelia…                 40.3                   195\n 4 Adelie Penguin (Pygoscelis adelia…                 NA                      NA\n 5 Adelie Penguin (Pygoscelis adelia…                 36.7                   193\n 6 Adelie Penguin (Pygoscelis adelia…                 39.3                   190\n 7 Adelie Penguin (Pygoscelis adelia…                 38.9                   181\n 8 Adelie Penguin (Pygoscelis adelia…                 39.2                   195\n 9 Adelie Penguin (Pygoscelis adelia…                 34.1                   193\n10 Adelie Penguin (Pygoscelis adelia…                 42                     190\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\nOr `everything()`, which we usually use to reorder columns:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  select(Species, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 17\n   Species         studyName `Sample Number` Region Island Stage `Individual ID`\n   <chr>           <chr>               <dbl> <chr>  <chr>  <chr> <chr>          \n 1 Adelie Penguin… PAL0708                 1 Anvers Torge… Adul… N1A1           \n 2 Adelie Penguin… PAL0708                 2 Anvers Torge… Adul… N1A2           \n 3 Adelie Penguin… PAL0708                 3 Anvers Torge… Adul… N2A1           \n 4 Adelie Penguin… PAL0708                 4 Anvers Torge… Adul… N2A2           \n 5 Adelie Penguin… PAL0708                 5 Anvers Torge… Adul… N3A1           \n 6 Adelie Penguin… PAL0708                 6 Anvers Torge… Adul… N3A2           \n 7 Adelie Penguin… PAL0708                 7 Anvers Torge… Adul… N4A1           \n 8 Adelie Penguin… PAL0708                 8 Anvers Torge… Adul… N4A2           \n 9 Adelie Penguin… PAL0708                 9 Anvers Torge… Adul… N5A1           \n10 Adelie Penguin… PAL0708                10 Anvers Torge… Adul… N5A2           \n# ℹ 334 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-tip\n### Tip\nNotice that all these commands have not edited our existent objects---they have just printed the requested outputs to the screen. In order to modify objects, you need to use the assignment operator (`<-`). For example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw_reduced <- penguins_raw |> \n  select(Species, matches(\"Length\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw_reduced\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   Species                            `Culmen Length (mm)` `Flipper Length (mm)`\n   <chr>                                             <dbl>                 <dbl>\n 1 Adelie Penguin (Pygoscelis adelia…                 39.1                   181\n 2 Adelie Penguin (Pygoscelis adelia…                 39.5                   186\n 3 Adelie Penguin (Pygoscelis adelia…                 40.3                   195\n 4 Adelie Penguin (Pygoscelis adelia…                 NA                      NA\n 5 Adelie Penguin (Pygoscelis adelia…                 36.7                   193\n 6 Adelie Penguin (Pygoscelis adelia…                 39.3                   190\n 7 Adelie Penguin (Pygoscelis adelia…                 38.9                   181\n 8 Adelie Penguin (Pygoscelis adelia…                 39.2                   195\n 9 Adelie Penguin (Pygoscelis adelia…                 34.1                   193\n10 Adelie Penguin (Pygoscelis adelia…                 42                     190\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::: callout-note\n#### Exercise\n\nSelect the variables `Species`, `Stage`, `Individual ID`, `Clutch Completion`, and `Date Egg` from the data frame.\n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n##### Solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  select(Species, Stage, `Individual ID`, `Clutch Completion`, `Date Egg`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 5\n   Species                  Stage `Individual ID` `Clutch Completion` `Date Egg`\n   <chr>                    <chr> <chr>           <chr>               <date>    \n 1 Adelie Penguin (Pygosce… Adul… N1A1            Yes                 2007-11-11\n 2 Adelie Penguin (Pygosce… Adul… N1A2            Yes                 2007-11-11\n 3 Adelie Penguin (Pygosce… Adul… N2A1            Yes                 2007-11-16\n 4 Adelie Penguin (Pygosce… Adul… N2A2            Yes                 2007-11-16\n 5 Adelie Penguin (Pygosce… Adul… N3A1            Yes                 2007-11-16\n 6 Adelie Penguin (Pygosce… Adul… N3A2            Yes                 2007-11-16\n 7 Adelie Penguin (Pygosce… Adul… N4A1            No                  2007-11-15\n 8 Adelie Penguin (Pygosce… Adul… N4A2            No                  2007-11-15\n 9 Adelie Penguin (Pygosce… Adul… N5A1            Yes                 2007-11-09\n10 Adelie Penguin (Pygosce… Adul… N5A2            Yes                 2007-11-09\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\n:::\n::::\n\n## Renaming columns\n\nWe can use the `rename()` function to rename columns, with the syntax `new_name = old_name`. For example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  rename(id = `Individual ID`, \n         flipper_length = `Flipper Length (mm)`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 17\n   studyName `Sample Number` Species                   Region Island Stage id   \n   <chr>               <dbl> <chr>                     <chr>  <chr>  <chr> <chr>\n 1 PAL0708                 1 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N1A1 \n 2 PAL0708                 2 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N1A2 \n 3 PAL0708                 3 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N2A1 \n 4 PAL0708                 4 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N2A2 \n 5 PAL0708                 5 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N3A1 \n 6 PAL0708                 6 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N3A2 \n 7 PAL0708                 7 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N4A1 \n 8 PAL0708                 8 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N4A2 \n 9 PAL0708                 9 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N5A1 \n10 PAL0708                10 Adelie Penguin (Pygoscel… Anvers Torge… Adul… N5A2 \n# ℹ 334 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   flipper_length <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n\n\n\nThis is a good occasion to show how pipes allow us to chain operations. How do we read the following code out loud? (Remember that pipes are read as \"then\").\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  select(Species, `Individual ID`, matches(\"Length\")) |> \n  rename(id = `Individual ID`, \n         flipper_length = `Flipper Length (mm)`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 4\n   Species                             id    `Culmen Length (mm)` flipper_length\n   <chr>                               <chr>                <dbl>          <dbl>\n 1 Adelie Penguin (Pygoscelis adeliae) N1A1                  39.1            181\n 2 Adelie Penguin (Pygoscelis adeliae) N1A2                  39.5            186\n 3 Adelie Penguin (Pygoscelis adeliae) N2A1                  40.3            195\n 4 Adelie Penguin (Pygoscelis adeliae) N2A2                  NA               NA\n 5 Adelie Penguin (Pygoscelis adeliae) N3A1                  36.7            193\n 6 Adelie Penguin (Pygoscelis adeliae) N3A2                  39.3            190\n 7 Adelie Penguin (Pygoscelis adeliae) N4A1                  38.9            181\n 8 Adelie Penguin (Pygoscelis adeliae) N4A2                  39.2            195\n 9 Adelie Penguin (Pygoscelis adeliae) N5A1                  34.1            193\n10 Adelie Penguin (Pygoscelis adeliae) N5A2                  42              190\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Creating columns\n\nIt is common to want to create columns based on existing ones. We can use `mutate()` to do so. For example, we could want to express the main length variables (length of the penguin's flipper and *culmen*, the dorsal ridge of their bill) in **centimeters** instead of **millimeters**:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  select(Species, matches(\"Length\")) |> # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |>\n  #mutate length variables\n  mutate(flipper_length_cm = flipper_length * 0.1,\n         culmen_length_cm = `Culmen Length (mm)` * 0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 5\n   Species                 `Culmen Length (mm)` flipper_length flipper_length_cm\n   <chr>                                  <dbl>          <dbl>             <dbl>\n 1 Adelie Penguin (Pygosc…                 39.1            181              18.1\n 2 Adelie Penguin (Pygosc…                 39.5            186              18.6\n 3 Adelie Penguin (Pygosc…                 40.3            195              19.5\n 4 Adelie Penguin (Pygosc…                 NA               NA              NA  \n 5 Adelie Penguin (Pygosc…                 36.7            193              19.3\n 6 Adelie Penguin (Pygosc…                 39.3            190              19  \n 7 Adelie Penguin (Pygosc…                 38.9            181              18.1\n 8 Adelie Penguin (Pygosc…                 39.2            195              19.5\n 9 Adelie Penguin (Pygosc…                 34.1            193              19.3\n10 Adelie Penguin (Pygosc…                 42              190              19  \n# ℹ 334 more rows\n# ℹ 1 more variable: culmen_length_cm <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nWe can also use multiple columns for creating a new one. For example, let's calculate the flipper to culmen length ratio: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n select(Species,  matches(\"Length\")) |> # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |>\n  mutate(flipper_culmen_ratio = flipper_length/`Culmen Length (mm)`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 4\n   Species              `Culmen Length (mm)` flipper_length flipper_culmen_ratio\n   <chr>                               <dbl>          <dbl>                <dbl>\n 1 Adelie Penguin (Pyg…                 39.1            181                 4.63\n 2 Adelie Penguin (Pyg…                 39.5            186                 4.71\n 3 Adelie Penguin (Pyg…                 40.3            195                 4.84\n 4 Adelie Penguin (Pyg…                 NA               NA                NA   \n 5 Adelie Penguin (Pyg…                 36.7            193                 5.26\n 6 Adelie Penguin (Pyg…                 39.3            190                 4.83\n 7 Adelie Penguin (Pyg…                 38.9            181                 4.65\n 8 Adelie Penguin (Pyg…                 39.2            195                 4.97\n 9 Adelie Penguin (Pyg…                 34.1            193                 5.66\n10 Adelie Penguin (Pyg…                 42              190                 4.52\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Filtering rows\n\nAnother common operation is to filter rows based on logical conditions. We can do so with the `filter()` function. For example, we can filter to only get penguins of a certain species:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  filter(Species == \"Gentoo penguin (Pygoscelis papua)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 124 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   <chr>               <dbl> <chr>           <chr>  <chr>  <chr> <chr>          \n 1 PAL0708                 1 Gentoo penguin… Anvers Biscoe Adul… N31A1          \n 2 PAL0708                 2 Gentoo penguin… Anvers Biscoe Adul… N31A2          \n 3 PAL0708                 3 Gentoo penguin… Anvers Biscoe Adul… N32A1          \n 4 PAL0708                 4 Gentoo penguin… Anvers Biscoe Adul… N32A2          \n 5 PAL0708                 5 Gentoo penguin… Anvers Biscoe Adul… N33A1          \n 6 PAL0708                 6 Gentoo penguin… Anvers Biscoe Adul… N33A2          \n 7 PAL0708                 7 Gentoo penguin… Anvers Biscoe Adul… N34A1          \n 8 PAL0708                 8 Gentoo penguin… Anvers Biscoe Adul… N34A2          \n 9 PAL0708                 9 Gentoo penguin… Anvers Biscoe Adul… N35A1          \n10 PAL0708                10 Gentoo penguin… Anvers Biscoe Adul… N35A2          \n# ℹ 114 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n\n\n\nNotice that `==` here is a *logical operator*, read as \"is equal to.\" So our full chain of operations says the following: take `penguins_raw`, then filter it to get rows where the Species is equal to \"Gentoo penguin (Pygoscelis papua)\".\n\nThere are other logical operators, also called **boolean** operators:\n\n| Logical operator | Meaning                       |\n|------------------|-------------------------------|\n| `==`             | \"is equal to\"                 |\n| `!=`             | \"is not equal to\"             |\n| `>`              | \"is greater than\"             |\n| `<`              | \"is less than\"                |\n| `>=`             | \"is greater than or equal to\" |\n| `<=`             | \"is less than or equal to\"    |\n| `%in%`           | \"is contained in\"             |\n| `&`              | \"and\" (intersection)          |\n| `|`              | \"or\" (union)                  |\n\nLet's see a couple of other examples.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  filter(Island %in% c(\"Torgersen\", \"Biscoe\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 220 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   <chr>               <dbl> <chr>           <chr>  <chr>  <chr> <chr>          \n 1 PAL0708                 1 Adelie Penguin… Anvers Torge… Adul… N1A1           \n 2 PAL0708                 2 Adelie Penguin… Anvers Torge… Adul… N1A2           \n 3 PAL0708                 3 Adelie Penguin… Anvers Torge… Adul… N2A1           \n 4 PAL0708                 4 Adelie Penguin… Anvers Torge… Adul… N2A2           \n 5 PAL0708                 5 Adelie Penguin… Anvers Torge… Adul… N3A1           \n 6 PAL0708                 6 Adelie Penguin… Anvers Torge… Adul… N3A2           \n 7 PAL0708                 7 Adelie Penguin… Anvers Torge… Adul… N4A1           \n 8 PAL0708                 8 Adelie Penguin… Anvers Torge… Adul… N4A2           \n 9 PAL0708                 9 Adelie Penguin… Anvers Torge… Adul… N5A1           \n10 PAL0708                10 Adelie Penguin… Anvers Torge… Adul… N5A2           \n# ℹ 210 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  filter(Island == \"Torgersen\" & Sex == \"MALE\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 23 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   <chr>               <dbl> <chr>           <chr>  <chr>  <chr> <chr>          \n 1 PAL0708                 1 Adelie Penguin… Anvers Torge… Adul… N1A1           \n 2 PAL0708                 6 Adelie Penguin… Anvers Torge… Adul… N3A2           \n 3 PAL0708                 8 Adelie Penguin… Anvers Torge… Adul… N4A2           \n 4 PAL0708                14 Adelie Penguin… Anvers Torge… Adul… N7A2           \n 5 PAL0708                15 Adelie Penguin… Anvers Torge… Adul… N8A1           \n 6 PAL0708                18 Adelie Penguin… Anvers Torge… Adul… N9A2           \n 7 PAL0708                20 Adelie Penguin… Anvers Torge… Adul… N10A2          \n 8 PAL0809                70 Adelie Penguin… Anvers Torge… Adul… N32A2          \n 9 PAL0809                72 Adelie Penguin… Anvers Torge… Adul… N34A2          \n10 PAL0809                74 Adelie Penguin… Anvers Torge… Adul… N35A2          \n# ℹ 13 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  filter(`Flipper Length (mm)` > 200)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 148 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   <chr>               <dbl> <chr>           <chr>  <chr>  <chr> <chr>          \n 1 PAL0809                91 Adelie Penguin… Anvers Dream  Adul… N45A1          \n 2 PAL0809                92 Adelie Penguin… Anvers Dream  Adul… N45A2          \n 3 PAL0809                96 Adelie Penguin… Anvers Dream  Adul… N48A2          \n 4 PAL0910               102 Adelie Penguin… Anvers Biscoe Adul… N47A2          \n 5 PAL0910               124 Adelie Penguin… Anvers Torge… Adul… N67A2          \n 6 PAL0910               130 Adelie Penguin… Anvers Torge… Adul… N72A2          \n 7 PAL0910               152 Adelie Penguin… Anvers Dream  Adul… N85A2          \n 8 PAL0708                 1 Gentoo penguin… Anvers Biscoe Adul… N31A1          \n 9 PAL0708                 2 Gentoo penguin… Anvers Biscoe Adul… N31A2          \n10 PAL0708                 3 Gentoo penguin… Anvers Biscoe Adul… N32A1          \n# ℹ 138 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n\n\n\n\n::: callout-note\n#### Tip\n\nConfused about when to use `filter()` and when to use `select()`? You use `filter()` to select *rows* (i.e., specific observations) with specific attributes, and you use `select()` to select *columns* (i.e., specific variables). To help keep it straight, remember that the letter **\"c\"** for column is in `select()` and the letter **\"r\"** for row is in `filter()`.\n\n:::\n\n\n:::: callout-note\n#### Exercise\n\n1.  Add a new column to the data frame, called `length_mass_ratio`, which calculates the ratio of the penguin's flipper length `Flipper Length (mm)` and their body mass `Body Mass (g)`. How would you calculate  `length_cm_mass_ratio`, where the flipper length is expressed as centimeters instead of millimeters? \n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n##### Solution\n\nTo calculate `length_mass_ratio`: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Length to mass ratio:\npenguins_raw |> \n select(Species, `Body Mass (g)`, matches(\"Length\")) |> # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |>\n  mutate(length_mass_ratio = flipper_length/`Body Mass (g)`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 5\n   Species `Body Mass (g)` `Culmen Length (mm)` flipper_length length_mass_ratio\n   <chr>             <dbl>                <dbl>          <dbl>             <dbl>\n 1 Adelie…            3750                 39.1            181            0.0483\n 2 Adelie…            3800                 39.5            186            0.0489\n 3 Adelie…            3250                 40.3            195            0.06  \n 4 Adelie…              NA                 NA               NA           NA     \n 5 Adelie…            3450                 36.7            193            0.0559\n 6 Adelie…            3650                 39.3            190            0.0521\n 7 Adelie…            3625                 38.9            181            0.0499\n 8 Adelie…            4675                 39.2            195            0.0417\n 9 Adelie…            3475                 34.1            193            0.0555\n10 Adelie…            4250                 42              190            0.0447\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\nThere are two ways to calculate `length_cm_mass_ratio` in centimeters, you could either generate a new length variable in centimeters, or just apply the unit transformation to the ratio equation: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n select(Species, `Body Mass (g)`, matches(\"Length\")) |> # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |>\n  mutate(flipper_cm = flipper_length * 0.1, \n      length_cm_mass_ratio = flipper_cm/`Body Mass (g)`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 6\n   Species        `Body Mass (g)` `Culmen Length (mm)` flipper_length flipper_cm\n   <chr>                    <dbl>                <dbl>          <dbl>      <dbl>\n 1 Adelie Pengui…            3750                 39.1            181       18.1\n 2 Adelie Pengui…            3800                 39.5            186       18.6\n 3 Adelie Pengui…            3250                 40.3            195       19.5\n 4 Adelie Pengui…              NA                 NA               NA       NA  \n 5 Adelie Pengui…            3450                 36.7            193       19.3\n 6 Adelie Pengui…            3650                 39.3            190       19  \n 7 Adelie Pengui…            3625                 38.9            181       18.1\n 8 Adelie Pengui…            4675                 39.2            195       19.5\n 9 Adelie Pengui…            3475                 34.1            193       19.3\n10 Adelie Pengui…            4250                 42              190       19  \n# ℹ 334 more rows\n# ℹ 1 more variable: length_cm_mass_ratio <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\npenguins_raw |> \n select(Species, `Body Mass (g)`, matches(\"Length\")) |> # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |>\n  mutate(length_cm_mass_ratio = flipper_length/`Body Mass (g)` * 0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 5\n   Species                   `Body Mass (g)` `Culmen Length (mm)` flipper_length\n   <chr>                               <dbl>                <dbl>          <dbl>\n 1 Adelie Penguin (Pygoscel…            3750                 39.1            181\n 2 Adelie Penguin (Pygoscel…            3800                 39.5            186\n 3 Adelie Penguin (Pygoscel…            3250                 40.3            195\n 4 Adelie Penguin (Pygoscel…              NA                 NA               NA\n 5 Adelie Penguin (Pygoscel…            3450                 36.7            193\n 6 Adelie Penguin (Pygoscel…            3650                 39.3            190\n 7 Adelie Penguin (Pygoscel…            3625                 38.9            181\n 8 Adelie Penguin (Pygoscel…            4675                 39.2            195\n 9 Adelie Penguin (Pygoscel…            3475                 34.1            193\n10 Adelie Penguin (Pygoscel…            4250                 42              190\n# ℹ 334 more rows\n# ℹ 1 more variable: length_cm_mass_ratio <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n2.  Filter the data frame to only get penguins with nests observed with a fully completed clutch. \n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n##### Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  filter(`Clutch Completion` == \"Yes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 308 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   <chr>               <dbl> <chr>           <chr>  <chr>  <chr> <chr>          \n 1 PAL0708                 1 Adelie Penguin… Anvers Torge… Adul… N1A1           \n 2 PAL0708                 2 Adelie Penguin… Anvers Torge… Adul… N1A2           \n 3 PAL0708                 3 Adelie Penguin… Anvers Torge… Adul… N2A1           \n 4 PAL0708                 4 Adelie Penguin… Anvers Torge… Adul… N2A2           \n 5 PAL0708                 5 Adelie Penguin… Anvers Torge… Adul… N3A1           \n 6 PAL0708                 6 Adelie Penguin… Anvers Torge… Adul… N3A2           \n 7 PAL0708                 9 Adelie Penguin… Anvers Torge… Adul… N5A1           \n 8 PAL0708                10 Adelie Penguin… Anvers Torge… Adul… N5A2           \n 9 PAL0708                11 Adelie Penguin… Anvers Torge… Adul… N6A1           \n10 PAL0708                12 Adelie Penguin… Anvers Torge… Adul… N6A2           \n# ℹ 298 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n\n\n::: \n\n\n3.  Filter the data frame to only get penguins with nests observed with a fully completed clutch on the Island of Torgersen. \n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n##### Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  filter(`Clutch Completion` == \"Yes\" & Island == \"Torgersen\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 44 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   <chr>               <dbl> <chr>           <chr>  <chr>  <chr> <chr>          \n 1 PAL0708                 1 Adelie Penguin… Anvers Torge… Adul… N1A1           \n 2 PAL0708                 2 Adelie Penguin… Anvers Torge… Adul… N1A2           \n 3 PAL0708                 3 Adelie Penguin… Anvers Torge… Adul… N2A1           \n 4 PAL0708                 4 Adelie Penguin… Anvers Torge… Adul… N2A2           \n 5 PAL0708                 5 Adelie Penguin… Anvers Torge… Adul… N3A1           \n 6 PAL0708                 6 Adelie Penguin… Anvers Torge… Adul… N3A2           \n 7 PAL0708                 9 Adelie Penguin… Anvers Torge… Adul… N5A1           \n 8 PAL0708                10 Adelie Penguin… Anvers Torge… Adul… N5A2           \n 9 PAL0708                11 Adelie Penguin… Anvers Torge… Adul… N6A1           \n10 PAL0708                12 Adelie Penguin… Anvers Torge… Adul… N6A2           \n# ℹ 34 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n\n## Ordering rows\n\nThe `arrange()` function allows us to order rows according to values. The default arranges from smallest to largest if numeric, or from A to Z if a character. For example, let's order based on the `Body Mass (g)` variable:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  arrange(`Body Mass (g)`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   <chr>               <dbl> <chr>           <chr>  <chr>  <chr> <chr>          \n 1 PAL0809                39 Chinstrap peng… Anvers Dream  Adul… N72A1          \n 2 PAL0809                59 Adelie Penguin… Anvers Biscoe Adul… N25A1          \n 3 PAL0809                65 Adelie Penguin… Anvers Biscoe Adul… N29A1          \n 4 PAL0809                55 Adelie Penguin… Anvers Biscoe Adul… N23A1          \n 5 PAL0809                99 Adelie Penguin… Anvers Dream  Adul… N50A1          \n 6 PAL0910               117 Adelie Penguin… Anvers Torge… Adul… N63A1          \n 7 PAL0708                23 Chinstrap peng… Anvers Dream  Adul… N85A1          \n 8 PAL0910               105 Adelie Penguin… Anvers Biscoe Adul… N51A1          \n 9 PAL0708                48 Adelie Penguin… Anvers Dream  Adul… N29A2          \n10 PAL0708                45 Adelie Penguin… Anvers Dream  Adul… N28A1          \n# ℹ 334 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n\n\n\nMaybe we only want penguins from the island of Biscoe. Remember that we can chain operations:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  filter(Island == \"Biscoe\") |> \n  arrange(`Body Mass (g)`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 168 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   <chr>               <dbl> <chr>           <chr>  <chr>  <chr> <chr>          \n 1 PAL0809                59 Adelie Penguin… Anvers Biscoe Adul… N25A1          \n 2 PAL0809                65 Adelie Penguin… Anvers Biscoe Adul… N29A1          \n 3 PAL0809                55 Adelie Penguin… Anvers Biscoe Adul… N23A1          \n 4 PAL0910               105 Adelie Penguin… Anvers Biscoe Adul… N51A1          \n 5 PAL0910               103 Adelie Penguin… Anvers Biscoe Adul… N49A1          \n 6 PAL0708                29 Adelie Penguin… Anvers Biscoe Adul… N18A1          \n 7 PAL0809                61 Adelie Penguin… Anvers Biscoe Adul… N27A1          \n 8 PAL0910               109 Adelie Penguin… Anvers Biscoe Adul… N55A1          \n 9 PAL0708                28 Adelie Penguin… Anvers Biscoe Adul… N17A2          \n10 PAL0910               113 Adelie Penguin… Anvers Biscoe Adul… N60A1          \n# ℹ 158 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n\n\n\nBy default, `arrange()` uses increasing order (like `sort()`). To use decreasing order, add a minus sign:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  filter(Island == \"Biscoe\") |> \n  arrange(-`Body Mass (g)`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 168 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   <chr>               <dbl> <chr>           <chr>  <chr>  <chr> <chr>          \n 1 PAL0708                18 Gentoo penguin… Anvers Biscoe Adul… N39A2          \n 2 PAL0708                34 Gentoo penguin… Anvers Biscoe Adul… N56A2          \n 3 PAL0809                78 Gentoo penguin… Anvers Biscoe Adul… N58A2          \n 4 PAL0910               118 Gentoo penguin… Anvers Biscoe Adul… N36A2          \n 5 PAL0809                80 Gentoo penguin… Anvers Biscoe Adul… N60A2          \n 6 PAL0910               112 Gentoo penguin… Anvers Biscoe Adul… N32A2          \n 7 PAL0708                14 Gentoo penguin… Anvers Biscoe Adul… N37A2          \n 8 PAL0708                16 Gentoo penguin… Anvers Biscoe Adul… N38A2          \n 9 PAL0910               116 Gentoo penguin… Anvers Biscoe Adul… N35A2          \n10 PAL0809                68 Gentoo penguin… Anvers Biscoe Adul… N51A2          \n# ℹ 158 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n\n\n\nYou can also order rows by more than one variable. What this does is to order by the first variable, and resolve any ties by ordering by the second variable (and so forth if you have more than two ordering variables). For example, let's first order our data frame by sex, and then within sex order by body mass:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  filter(Island == \"Biscoe\") |> \n  arrange(Sex, `Body Mass (g)`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 168 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   <chr>               <dbl> <chr>           <chr>  <chr>  <chr> <chr>          \n 1 PAL0809                59 Adelie Penguin… Anvers Biscoe Adul… N25A1          \n 2 PAL0809                65 Adelie Penguin… Anvers Biscoe Adul… N29A1          \n 3 PAL0809                55 Adelie Penguin… Anvers Biscoe Adul… N23A1          \n 4 PAL0910               105 Adelie Penguin… Anvers Biscoe Adul… N51A1          \n 5 PAL0910               103 Adelie Penguin… Anvers Biscoe Adul… N49A1          \n 6 PAL0708                29 Adelie Penguin… Anvers Biscoe Adul… N18A1          \n 7 PAL0809                61 Adelie Penguin… Anvers Biscoe Adul… N27A1          \n 8 PAL0910               109 Adelie Penguin… Anvers Biscoe Adul… N55A1          \n 9 PAL0708                28 Adelie Penguin… Anvers Biscoe Adul… N17A2          \n10 PAL0910               113 Adelie Penguin… Anvers Biscoe Adul… N60A1          \n# ℹ 158 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n\n\n\n:::: callout-note\n#### Exercise\n\nArrange the data by `length_mass_ratio`, the ratio of the penguin's flipper length (in mm) and the penguin's body mass (in g). (You should have code on how to create this variable from the last exercise). \n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n##### Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n select(Species, `Body Mass (g)`, matches(\"Length\")) |> # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |>\n  mutate(length_mass_ratio = flipper_length/`Body Mass (g)`) |>\n  arrange(length_mass_ratio)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 5\n   Species `Body Mass (g)` `Culmen Length (mm)` flipper_length length_mass_ratio\n   <chr>             <dbl>                <dbl>          <dbl>             <dbl>\n 1 Gentoo…            6300                 49.2            221            0.0351\n 2 Gentoo…            5850                 48.4            213            0.0364\n 3 Gentoo…            6000                 51.1            220            0.0367\n 4 Gentoo…            6000                 48.8            222            0.037 \n 5 Gentoo…            5850                 49.3            217            0.0371\n 6 Gentoo…            5950                 45.2            223            0.0375\n 7 Gentoo…            5500                 48.1            209            0.038 \n 8 Gentoo…            6050                 59.6            230            0.0380\n 9 Gentoo…            5650                 47.8            215            0.0381\n10 Gentoo…            5700                 50              218            0.0382\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n## Summarizing data\n\n\n`dplyr` makes summarizing data a breeze using the `summarize()` function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  summarize(mean_flipper_length = mean(`Flipper Length (mm)`),\n            mean_body_mass = mean(`Body Mass (g)`))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  mean_flipper_length mean_body_mass\n                <dbl>          <dbl>\n1                  NA             NA\n```\n\n\n:::\n:::\n\n\n\n\n\n::: callout-note\n#### Tip \n\nOh no! If you want to calculate the mean or do another arithmatic operation on a numeric vector and R returns `NA` values, it likely means that the vector has missing values. Use `na.rm = T` or one of the other operators you learned in the [intro session](r-intro.qmd) to drop the `NA` values in your calculation. \n\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  summarize(mean_flipper_length = mean(`Flipper Length (mm)`, na.rm = T),\n            mean_body_mass = mean(`Body Mass (g)`, na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  mean_flipper_length mean_body_mass\n                <dbl>          <dbl>\n1                201.          4202.\n```\n\n\n:::\n:::\n\n\n\n\n\nTo make summaries, we can use any function that takes a vector and returns one value. Another example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  filter(`Clutch Completion` == \"Yes\") |> # to filter out penguins that did not have an (observed) full nest \n  summarize(max_flipper_length = max(`Flipper Length (mm)`, na.rm = T),\n            min_flipper_length = min(`Flipper Length (mm)`, na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  max_flipper_length min_flipper_length\n               <dbl>              <dbl>\n1                231                174\n```\n\n\n:::\n:::\n\n\n\n\n*Grouped summaries* allow us to disaggregate summaries according to other variables (usually categorical):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n  filter(`Clutch Completion` == \"Yes\") |> # to filter out penguins that did not have an (observed) full nest \n  summarize(max_flipper_length = max(`Flipper Length (mm)`, na.rm = T),\n            min_flipper_length = min(`Flipper Length (mm)`, na.rm = T),\n            .by = Sex)  #  to group by sex \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  Sex    max_flipper_length min_flipper_length\n  <chr>               <dbl>              <dbl>\n1 MALE                  231                178\n2 FEMALE                222                174\n3 <NA>                  217                179\n```\n\n\n:::\n\n```{.r .cell-code}\npenguins_raw |> \n  filter(`Clutch Completion` == \"Yes\") |> # to filter out penguins that did not have an (observed) full nest \n  summarize(max_flipper_length = max(`Flipper Length (mm)`, na.rm = T),\n            min_flipper_length = min(`Flipper Length (mm)`, na.rm = T),\n            .by = Sex) |>  #  to group by sex \n  filter(is.na(Sex) == F) # to drop the penguins with an unknown sex \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  Sex    max_flipper_length min_flipper_length\n  <chr>               <dbl>              <dbl>\n1 MALE                  231                178\n2 FEMALE                222                174\n```\n\n\n:::\n:::\n\n\n\n\n:::: callout-note\n#### Exercise\n\nObtain the maximum and minimum flipper length to mass ratio (call them `max_ratio` and `min_ratio`, drawing from the `length_mass_ratio` variable from before) for each penguin species. \n\n::: {.callout-caution collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n##### Solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_raw |> \n select(Species, `Body Mass (g)`, matches(\"Length\")) |> # select just for clarity\n    rename(flipper_length = `Flipper Length (mm)`) |>\n  mutate(length_mass_ratio = flipper_length/`Body Mass (g)`) |>\n  # summarize flipper length to mass ratio by species\n summarize(max_ratio = max(length_mass_ratio, na.rm = T),\n            min_ratio = min(length_mass_ratio, na.rm = T),\n            .by = Species)   #  to group by species \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  Species                                   max_ratio min_ratio\n  <chr>                                         <dbl>     <dbl>\n1 Adelie Penguin (Pygoscelis adeliae)          0.0660    0.0396\n2 Gentoo penguin (Pygoscelis papua)            0.0527    0.0351\n3 Chinstrap penguin (Pygoscelis antarctica)    0.0711    0.0438\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::::\n\n## Overview\n\n| Function               | Purpose                      |\n|------------------------|------------------------------|\n| `select()`             | Select columns               |\n| `rename()`             | Rename columns               |\n| `mutate()`             | Creating columns             |\n| `filter()`             | Filtering rows               |\n| `arrange()`            | Ordering rows                |\n| `summarize()`          | Summarizing data             |\n| `summarize(…, .by = )` | Summarizing data (by groups) |\n\n\n\n\n## Reviewing Git and GitHub - NOT COMPLETE\n\nNow that we have our gapminder data prepared, let's use what we learned\nabout git and GitHub in the previous lesson to add, commit, and push our\nchanges.\n\nOpen Terminal/Git Bash, if you do not have it open already. First we'll\nneed to navigate to our un-report directory.\n\nLet's start by print our current working directory and listing the items\nin the directory, to see where we are.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}