{
  "hash": "856667e4ea5452d625486bac798d7bbd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R and RStudio\"\nformat: html\nexecute:\n  error: TRUE\neditor:\n  markdown: \n    wrap: 72\n---\n\n\n\n\nToday we will use R, but we could have also used Python for the same reasons we chose R (and we teach workshops for both languages). Both R and Python are freely available, the instructions you use to do analyses are easily shared, and by using reproducible practices, it's straightforward to add more data or to change settings like colors or the size of a plotting symbol.\n\n::: {.callout-note}\n### Why R and not Python?\n\n[There's no great reason](http://www.academichermit.com/2020/03/23/Why-R.html).\nAlthough there are subtle differences between the languages, it's ultimately a matter of personal preference. Both are powerful and popular languages that have very well developed and welcoming communities of scientists that use them. As you learn more about R, you may find things that are annoying in R that aren't so annoying in Python; the same could be said of learning Python. If the community you work in uses R, then you're in the right place.\n:::\n\nTo run R, all you really need is the R program, which is available for computers running the Windows, Mac OS X, or Linux operating systems. You should have downloaded R while getting for this workshop.\n\n---\n\n# RStudio\n\nTo make your life in R easier, there is a great (and free!) program called RStudio that you also downloaded and used during [set up](setup.html). As we work today, we'll use features that are available in RStudio for writing and running code, managing projects, installing packages, getting help, and much more. It is important to remember that R and RStudio are different, but complementary programs. You need R to use RStudio.\n\n::: {.callout-tip collapse=\"true\"}\n### Bonus Exercise: Can you think of a reason you might not want to use RStudio?\n\nOn some high-performance computer systems (e.g., Amazon Web Services) you typically can't get a display like RStudio to open. Your university may have an interactive cluster available, but Syracuse University's Zest HPC cluster [does not permit interactive development](https://su-jsm.atlassian.net/wiki/spaces/RESCOMP/pages/164169568/Zest+Slurm+Support). If you need to use RStudio, Syracuse affiliates should check out [Google Colab](https://su-jsm.atlassian.net/wiki/spaces/RESCOMP/pages/237371891/Using+Google+Colab+for+Research+Development).\n:::\n\nTo get started, we'll spend a little time getting familiar with the RStudio environment and setting it up to suit your tastes. When you start RStudio, you'll have three panels.\n\n<img src=\"fig/initial_rstudio.png\" width=\"700\"/>\n\nOn the left you'll have a panel with three tabs - Console, Terminal, and Jobs. The Console tab is what running R from the command line looks like. This is where you can enter R code. Try typing in `2+2` at the prompt (>). In the upper right panel are tabs indicating the Environment, History, and a few other things. If you click on the History tab, you'll see the command you ran at the R prompt.\n\n<img src=\"fig/history.png\" width=\"700\"/>\n\nIn the lower right panel are tabs for Files, Plots, Packages, Help, and Viewer. Click on the \"Packages\" tab. Packages are add-on libraries developed by R community members. Each package contains a suite of functions that, once loaded, can be used within your code. As an exercise, we'll install the \"tidyverse\" package, which we'll end up using a lot in our future sessions. Click the <kbd>Install</kbd> button, then type \"tidyverse\" in the empty box and click the <kbd>Install</kbd> button. The installation process may take a few minutes since this is actually installing [more than 10 packages](https://www.tidyverse.org/packages/) and their dependencies (the packages that provide functions that are then used in these packages).\n\n<img src=\"fig/install_packages.png\" width=\"600\"/>\n\n::: {.callout-note}\n### The tidyverse vs Base R\n\nIf you've used R before, you may have learned commands that are different than the ones we will be using during this workshop. We will be focusing on functions from the [tidyverse](https://www.tidyverse.org/). The \"tidyverse\" is a collection of R packages that have been designed to work well together and offer many convenient features that do not come with a fresh install of R (aka \"base R\"). These packages are very popular and have a lot of developer support including many staff members from RStudio. These functions generally help you to write code that is easier to read and maintain. We believe learning these tools will help you become more productive more quickly.\n:::\n\nYou can use the Pane Layout menu (accessed from the button that look like a top-down view of a 2x2 ice cube tray) to change where different tabs live. For example, I like to have the plots in the top right panel, so I can see the help docs and the plots at the same time. I also usually switch the positions of the console and editor so that the editor is on the bottom.\n\n<img src=\"fig/pane_layout.png\" width=\"600\"/>\n\nWe'll spend more time in each of these tabs as we go through the workshop, so we won't spend a lot of time discussing them now.\n\nYou might want to alter the appearance of your RStudio window. The default appearance has a white background with black text. If you go to the Tools menu at the top of your screen, you'll see a \"Global options\" menu at the bottom of the drop down; select that.\n\n<img src=\"fig/global_options.png\" width=\"600\"/>\n\nFrom there you will see the ability to alter numerous things about RStudio. Under the Appearances tab you can select the theme you like most. As you can see there's a lot in Global options that you can set to improve your experience in RStudio. Most of these settings are a matter of personal preference.\n\n<img src=\"fig/general_options.png\" width=\"600\"/>\n\n---\n\n# Projects\n\nOne of the helpful features in RStudio is the ability to create a project. Projects make it straightforward to divide your work into multiple contexts, each with their own working directory, workspace, history, and scripts. You can create a fresh project, base one on an existing directory, or even build one based on a git repository. Since we're all [git experts now](../github/github-intro.qmd), let's go with that option.\n\nFirst, we'll need to create a GitHub repository. For the rest of the workshop, we'll be using data collected about adult male and female Ad√©lie (<i>P. adeliae</i>), chinstrap (<i>P. antarcticus</i>), and gentoo (<i>P. papua</i>) penguins on three islands (Biscoe, Dream, and Torgersen) within the Palmer Archipelago. For more information about the collection and handling of these data, see [Gorman et al. 2014](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0090081) and [Horst et al. 2022](https://journal.r-project.org/articles/RJ-2022-020/).\n\nI've hosted these data within a [fresh repository](https://github.com/SyracuseUniversity/penguins_repo) on GitHub. Like you did in the [git and Github session](../github/github-intro.qmd), go ahead and fork this repository so that you have your own personal copy of it.\n\n<img src=\"fig/penguins_repo.png\" width=\"600\"/>\n\nOnce you've forked the repository, click on the green \"Code\" button, then click on \"SSH\" (since we set up SSH with our GitHub account in the [Git and GitHub lesson](../github/github-intro.qmd)). Then copy the SSH link of the repo:\n\n<img src=\"fig/git_ssh_link.png\" width=\"600\"/>\n\nNow, return to your RStudio window. At the top of your screen you'll see the \"File\" menu. Select that menu and then the menu for \"New Project...\". (You could also use the second button on the second menu row or even the <kbd>Project: (None)</kbd> button in the top right)\n\n<img src=\"fig/new_project_menu.png\" width=\"600\"/>\n\nWhen the smaller window opens, select \"Version Control\" and then \"Git\" in the next window.\n\n<img src=\"fig/version_control.png\" width=\"600\"/>\n\n<img src=\"fig/git.png\" width=\"600\"/>\n\nNow paste your repository SSH link in the first box, then name your new repo directory in the second box (i.e., the name of the folder containing the repo on your computer; \"penguins\" is probably a good choice), and finally use the <kbd>Browse</kbd> button to select the local directory that you want to create this new directory within (i.e., the parent directory).\n\n<img src=\"fig/clone_git_repo.png\" width=\"600\"/>\n\n::: {.callout-note}\nIn addition to using the SSH link, you can also use the git URL of the repository (e.g., https://github.com/willgearty/penguins_repo.git). If you do this, you will need to either a) set up the SSH key connection manually using Git Bash or the Git Terminal in RStudio or b) set up a [personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens). You will be prompted to perform the \"b\" option the [first time you attempt to push to GitHub](#committing-and-pushing-changes-to-github).\n:::\n\nThen click the <kbd>Create Project</kbd> button.\n\nDid you notice anything change?\n\nIn the lower right corner of your RStudio session, you should notice that your\nFiles tab is now your project directory. You'll also see a file called\npenguins.Rproj in that directory.\n\nFrom now on, you should start RStudio by double clicking on that file. This will\nmake sure you are in the correct directory when you run your analysis.\n\n<img src=\"fig/files_with_rproj.png\" width=\"600\"/>\n\n# Scripts\nUsing the console is fine, but we'd ideally like to be able to save the R code that we write. This is where scripts and the Editor come in.\n\nBack in the \"File\" menu, you'll see the first option is \"New File\". Selecting \"New File\" opens another menu to the right and the first option is \"R Script\". Select \"R Script\".\n\nNow we have a fourth panel in the upper left corner of RStudio that includes an **Editor** tab with an untitled R Script. Let's save this file as `penguins.R` within the \"code\" directory.\n\nWe will now be entering all of our R code into the **Editor** tab to then run it in our **Console** panel.\n\nOn line 1 of `penguins.R`, type `2 + 2`.\n\nWith your cursor on the line with the `2 + 2`, click the button that says <kbd>Run</kbd>. You should be able to see that `2 + 2` was run in the Console.\n\nAs you write more code, you can highlight multiple lines and then click <kbd>Run</kbd> to run all of the lines you have selected.\n\nLet's delete the line with 2+2 and replace it with `library(tidyverse)`.\n\nGo ahead and run that line in the **Console** by clicking the <kbd>Run</kbd> button on the top right of the **Editor** tab and choosing <kbd>Run Selected Lines</kbd>. This loads a set of useful functions and sample data that makes it easier for us to do complex analyses and create professional visualizations in R.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.4     ‚úî readr     2.1.5\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.5.1     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.3     ‚úî tidyr     1.3.1\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-note}\n## What's with all those messages???\n\nWhen you loaded the `tidyverse` package, you probably got a message like the\none we got above. Don't panic! These messages are just giving you more\ninformation about what happened when you loaded `tidyverse`. The `tidyverse` is\nactually a collection of several different packages, so the first section of the\nmessage tells us what packages were installed when we loaded `tidyverse` (these\ninclude `ggplot2`, which we'll be using a lot in the [plotting lesson](r-plotting.qmd),\nand `dyplr`, which you'll be introduced to in the [data cleaning lesson](r-tidydata.qmd)).\n\nThe second section of messages gives a list of \"conflicts.\" Sometimes, the\nsame function name will be used in two different packages, and R has to decide\nwhich function to use. For example, our message says that:\n\n~~~\ndplyr::filter() masks stats::filter()\n~~~\n\nThis means that two different packages (`dyplr` from `tidyverse` and `stats`\nfrom base R) have a function named `filter()`. By default, R uses the function\nthat was most recently loaded, so if we try using the `filter()` function after\nloading `tidyverse`, we will be using the `filter()` function from `dplyr()`.\n\n:::\n\n\n::: {.callout-tip}\n## Pro-tip\n\nThose of us that use R on a daily basis use cheat sheets to help us remember how to use various R functions. If you haven't already, print out the PDF versions of the cheat sheets that were in the setup instructions.\n\nYou can also find them in RStudio by going to the \"Help\" menu and selecting \"Cheat Sheets\". The cheat sheets that will be most helpful in this workshop are \"Data Visualization with ggplot2\", \"Data Transformation with dplyr\", \"R Markdown Cheat Sheet\", and \"R Markdown Reference Guide\".\n\nFor things that aren't on the cheat sheets, Google is your best friend. Even expert coders use Google when they're stuck or trying something new!\n\n:::\n\n---\n\n# Loading and reviewing data\n\nOne of the most useful aspects of R (and other coding languages) is its ability to work with existing data. We will import one of the penguin data files from the \"data\" directory called `chinstrap_data.csv`. There are many ways to import data into R but for your first time we will use RStudio's file menu to import and display this data. As we move through this process, RStudio will translate these *point and click* commands into code for us.\n\nIn RStudio select \"File\" > \"Import Dataset\" > \"From Text (readr)\".\n\n<img src=\"fig/import_data.png\" width=\"600\"/>\n\nAs mentioned, the file is located in the \"data\" directory. Click the <kbd>Browse</kbd> button and select the file named `chinstrap_data.csv`. A preview of the data will appear in the window. You can see there are a lot of Import Options listed, but R has chosen the correct defaults for this particular file.\n\n<img src=\"fig/import_data_file.png\" width=\"600\"/>\n\nWe can see in that box that our data will be imported with the Name: \"chinstrap_data\". Also note that this screen will show you all the code that will be run when you import your data in the lower right \"Code Preview\". Since everything looks good, click the <kbd>Import</kbd> button to bring your data into R.\n\nAfter you've imported your data, a table will open in a new tab in the top left corner of RStudio. This is a quick way to browse your data to make sure everything looks like it has been imported correctly. To review the data, click on the new tab.\n\nAfter you've reviewed the data, you'll want to make sure to click the tab in the upper left to return to your `penguins.R` file so we can start writing some code.\n\nNow look in the **Environment** tab in the upper right corner of RStudio. Here you will see a list of all the objects you've created or imported during your R session. You will now see `chinstrap_data` listed here as well.\n\nFinally, take a look at the **Console** at the bottom left part of the RStudio screen. Here you will see the commands that were run for you to import your data in addition to associated metadata and warnings.\n\n::: {.callout-note}\n## Data objects\nThere are many different ways to store data in R. Most objects have a table-like structure with rows and columns. We will refer to these objects generally as \"data objects\". If you've used R before, you may be used to calling them \"data.frames\". Functions from the \"tidyverse\" such as `read_csv` work with objects called \"tibbles\", which are a specialized kind of \"data.frame.\" Another common way to store data is a \"data.table\". All of these types of data objects (tibbles, data.frames, and data.tables) can be used with the commands we will learn in these. We may sometimes use these terms interchangeably.\n:::\n\n---\n\n# Understanding commands\n\nLet's start by looking at the code RStudio ran for us by copying and pasting the second line from the console into our `penguins.R` file that is open in the **Editor** window.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchinstrap_data <- read_csv(\"data/chinstrap_data.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\nYou should now have a line of text in your code file that started with `chinstrap` and ends with a `)` symbol.\n\nWhat if we want to run this command from our code file?\n\nIn order to run code that you've typed in the editor, you have a few options. We can click <kbd>Run</kbd> again from the right side of the **Editor** tab but the quickest way to run the code is by pressing <kbd>Ctrl</kbd>+<kbd>Enter</kbd> on your keyboard (<kbd>Cmd</kbd>+<kbd>Return</kbd> on Mac).\n\nThis will run the line of code that currently contains your cursor and will move your cursor to the next line. Note that when Rstudio runs your code, it basically just copies your code from the **Editor** window to the **Console** window, just like what happened when we selected <kbd>Run Selected Line(s)</kbd>.\n\nLet's take a closer look at the parts of this command.\n\nStarting from the left, the first thing we see is `chinstrap_data`. We viewed the contents of this file after it was imported so we know that `chinstrap_data` acts as a placeholder for our data.\n\nIf we highlight just `chinstrap_data` within our code file and press <kbd>Ctrl</kbd>+<kbd>Enter</kbd> on our keyboard, what do we see?\n\nWe should see a data table outputted, similar to what we saw in the Viewer tab.\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 68 √ó 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   <chr>               <dbl> <chr>           <chr>  <chr>  <chr> <chr>          \n 1 PAL0708                 1 Chinstrap peng‚Ä¶ Anvers Dream  Adul‚Ä¶ N61A1          \n 2 PAL0708                 2 Chinstrap peng‚Ä¶ Anvers Dream  Adul‚Ä¶ N61A2          \n 3 PAL0708                 3 Chinstrap peng‚Ä¶ Anvers Dream  Adul‚Ä¶ N62A1          \n 4 PAL0708                 4 Chinstrap peng‚Ä¶ Anvers Dream  Adul‚Ä¶ N62A2          \n 5 PAL0708                 5 Chinstrap peng‚Ä¶ Anvers Dream  Adul‚Ä¶ N64A1          \n 6 PAL0708                 6 Chinstrap peng‚Ä¶ Anvers Dream  Adul‚Ä¶ N64A2          \n 7 PAL0708                 7 Chinstrap peng‚Ä¶ Anvers Dream  Adul‚Ä¶ N66A1          \n 8 PAL0708                 8 Chinstrap peng‚Ä¶ Anvers Dream  Adul‚Ä¶ N66A2          \n 9 PAL0708                 9 Chinstrap peng‚Ä¶ Anvers Dream  Adul‚Ä¶ N67A1          \n10 PAL0708                10 Chinstrap peng‚Ä¶ Anvers Dream  Adul‚Ä¶ N67A2          \n# ‚Ñπ 58 more rows\n# ‚Ñπ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n\n\n:::\n:::\n\n\n\n\nIn R terms, `chinstrap_data` is a named **object** that references or stores something. In this case, `chinstrap_data` stores a specific table of data.\n\nLooking back at the command in our code file, the second thing we see is a `<-` symbol, which is the **assignment operator**. It assigns values generated or typed on the right to objects on the left. An alternative symbol that you might see used as an **assignment operator** is the `=` but it is clearer to only use `<-` for assignment. We use this symbol so often that RStudio has a keyboard short cut for it: <kbd>Alt</kbd>+<kbd>-</kbd> on Windows, and <kbd>Option</kbd>+<kbd>-</kbd> on Mac.\n\n:::: {.callout-note}\n## Assigning values to objects\n\nTry to assign values to some objects and observe each object after you have assigned a new value. What do you notice?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- \"Ben\"\nname\nage <- 26\nage\nname <- \"Harry Potter\"\nname\n```\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n\n### Solution\n\nWhen we assign a value to an object, the object stores that value so we can access it later. However, if we store a new value in an object we have already created (like when we stored \"Harry Potter\" in the `name` object), it replaces the old value. The `age` object does not change, because we never assign it a new value.\n\n:::\n::::\n\n::: {.callout-important}\n## Guidelines on naming objects\n- You want your object names to be explicit and not too long.\n- They cannot start with a number (2x is not valid, but x2 is).\n- R is case sensitive, so for example, weight_kg is different from Weight_kg.\n- You cannot use spaces in the name.\n- There are some names that cannot be used because they are the names of fundamental functions in R (e.g., if, else, for; see [here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html) for a complete list). If in doubt, check the help to see if the name is already in use (`?function_name`).\n- It's best to avoid dots (.) within names. Many function names in R itself have them and dots also have a special meaning (methods) in R and other programming languages.\n- It is recommended to use nouns for object names and verbs for function names.\n- Be consistent in the styling of your code, such as where you put spaces, how you name objects, etc. Using a consistent coding style makes your code clearer to read for your future self and your collaborators. One popular style guide can be found through the [tidyverse](https://style.tidyverse.org/).\n:::\n\n:::: {.callout-note}\n## Bonus Exercise: Bad names for objects\nTry to assign values to some new objects. What do you notice? After running all four lines of code bellow, what value do you think the object `Flower` holds?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1number <- 3\nFlower <- \"marigold\"\nflower <- \"rose\"\nfavorite number <- 12\n```\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n## Solution\nNotice that we get an error when we try to assign values to `1number` and `favorite number`. This is because we cannot start an object name with a numeral and we cannot have spaces in object names. The object `Flower` still holds \"marigold.\" This is because R is case-sensitive, so running `flower <- \"rose\"` does NOT change the `Flower` object. This can get confusing, and is why we generally avoid having objects with the same name and different capitalization.\n\n:::\n::::\n\nThe next part of the command is `read_csv(\"data/chinstrap_data.csv\")`. This has a few different key parts. The first part is the `read_csv` function. You call a function in R by typing it's name followed by opening then closing parenthesis. Each function has a purpose, which is often hinted at by the name of the function. Let's try to run the function without anything inside the parenthesis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in read_csv(): argument \"file\" is missing, with no default\n```\n\n\n:::\n:::\n\n\n\n\nWe get an error message. Don't panic! Error messages pop up all the time, and can be super helpful in debugging code.\n\nIn this case, the message tells us \"argument \"file\" is missing, with no default.\" Many functions, including `read_csv`, require additional pieces of information to do their job. We call these additional values \"arguments\" or \"parameters.\" You pass **arguments** to a function by placing values in between the parenthesis. A function takes in these arguments and does a bunch of \"magic\" behind the scenes to output something we're interested in.\n\nFor example, when we loaded in our data, the command contained `\"chinstrap_data.csv\"` inside the `read_csv()` function. This is the value we assigned to the file argument. But we didn't say that that was the file. How does that work?\n\n::: {.callout-tip}\n## Pro-tip\n\nEach function has a help page that documents what arguments the function\nexpects and what value it will return. You can bring up the help page a few\ndifferent ways. If you have typed the function name in the **Editor** windows,\nyou can put your cursor on the function name and press <kbd>F1</kbd> to open\nhelp page in the **Help** viewer in the lower right corner of RStudio. You can\nalso type `?` followed by the function name in the console.\n\nFor example, try running `?read_csv`. A help page should pop up with\ninformation about what the function is used for and how to use it, as well as\nuseful examples of the function in action. As you can see, the first\n**argument** of `read_csv` is the file path.\n\n:::\n\nThe `read_csv()` function took the file path we provided, did who-knows-what behind the scenes, and then outputted an R object with the data stored in that csv file. All that, with one short line of code!\n\n::: {.callout-note}\n## Behind the curtain of functions\n\nIf you call a function without parentheses, it will often show you the source code of the function, demystifying its seemingly \"black box\" behavior. This can often be useful if a function is not behaving as you expect (but of course requires knowledge of what the functions in the source code do). Doing this will also tell you which package the function comes from (although you can also see this in the function's help page).\n:::\n\nDo all functions need arguments? Let's test some other functions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.Date()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-01-24\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C:/Users/willg/OneDrive - Syracuse University/Syracuse/ospo-workshop-r-intro\"\n```\n\n\n:::\n:::\n\n\n\n\n\nWhile some functions, like those above, don't need any arguments, in other\nfunctions we may want to use multiple arguments. When we're using multiple\narguments, we separate the arguments with commas. For example, we can use the\n`sum()` function to add numbers together:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(5, 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11\n```\n\n\n:::\n:::\n\n\n\n\n:::: {.callout-note}\n## Learning more about functions\nLook up the function `round`. What does it do? What will you get as output for the following lines of code?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(3.1415)\nround(3.1415, 3)\n```\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n## Solution\n`round` rounds a number. By default, it rounds it to zero digits (in our example above, to 3). If you give it a second number, it rounds it to that number of digits (in our example above, to 3.142)\n:::\n::::\n\nNotice how in this example, we didn't include any argument names. But you can\nuse argument names if you want:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(file = 'data/chinstrap_data.csv')\n```\n:::\n\n\n\n\n:::: {.callout-note}\n## Position of the arguments in functions\nWhich of the following lines of code will give you an output of 3.14? For the one(s) that don't give you 3.14, what do they give you?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(x = 3.1415)\nround(x = 3.1415, digits = 2)\nround(digits = 2, x = 3.1415)\nround(2, 3.1415)\n```\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n## Solution\nThe 2nd and 3rd lines will give you the right answer because the arguments are named, and when you use names the order doesn't matter. The 1st line will give you 3 because the default number of digits is 0. Then 4th line will give you 2 because, since you didn't name the arguments, x=2 and digits=3.1415.\n\n:::\n::::\n\nSometimes it is helpful - or even necessary - to include the argument name, but often we can skip the argument name, if the argument values are passed in a certain order. If all this function stuff sounds confusing, don't worry! We'll see a bunch of examples as we go that will make things clearer.\n\n:::: {.callout-note}\n## Reading in an excel file\nSay you have an excel file and not a csv - how would you read that in? Hint: Use the Internet to help you figure it out!\n\n::: {.callout-tip collapse=\"true\" appearance=\"simple\" icon=\"false\"}\n## Solution\nOne way is using the `read_excel` function in the `readxl` package. There are other ways, but this is our preferred method because the output will be the same as the output of `read_csv`.\n\n:::\n::::\n\n::: {.callout-important}\n## Comments\nSometimes you may want to write comments in your code to help you remember\nwhat your code is doing, but you don't want R to think these comments are a part\nof the code you want to evaluate. That's where **comments** come in! Anything\nafter a `#` symbol in your code will be ignored by R. For example, let's say we\nwanted to make a note of what each of the functions we just used do:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.Date()  # outputs the current date\ngetwd()     # outputs our current working directory (folder)\nsum(5, 6)   # adds numbers\nread_csv(file = 'data/chinstrap_data.csv') # reads in csv file\n```\n:::\n\n\n\n:::\n\n# Combining data\n\nThe last step before we can move on to [plotting](r-plotting.qmd) is reading in the other two data files and combining all three datasets into a single data object.\n\nFirst let's read in the \"adelie_data.csv\" file. While you may be tempted to use the RStudio GUI again, let's take a stab at writing the code ourselves. We'll use the same code as before, but with the filename changed:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadelie_data <- read_csv(file = 'data/adelie_data.csv')\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 152 Columns: 17\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr  (9): studyName, Species, Region, Island, Stage, Individual ID, Clutch C...\ndbl  (7): Sample Number, Culmen Length (mm), Culmen Depth (mm), Flipper Leng...\ndate (1): Date Egg\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\nYou should see that this new object is now listed in our environment. Also remember that we must always use the relative path to the file. While our script is located in our \"code\" directory, our working directory is actually the main directory of our project (as is the default for all projects). The relative path to the data file therefore must start with \"data/\".\n\nNow we can combine our two data objects together. The `bind_rows()` function binds two data frames together rowwise, resulting in a single data.frame. Since we may want the separate data objects later, we save this as a new object.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_data <- bind_rows(adelie_data, chinstrap_data)\n```\n:::\n\n\n\n\nWe can use the `table()` function to count how many of each penguin species are now in our combined data.frame. Here we use the `$` symbol to extract a single column of the data.frame:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(penguin_data$Species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n      Adelie Penguin (Pygoscelis adeliae) \n                                      152 \nChinstrap penguin (Pygoscelis antarctica) \n                                       68 \n```\n\n\n:::\n:::\n\n\n\n\nNow go ahead and read in the last data file and combine it with the existing combined data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngentoo_data <- read_csv(file = 'data/gentoo_data.csv')\npenguin_data <- bind_rows(penguin_data, gentoo_data)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 124 Columns: 17\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr  (9): studyName, Species, Region, Island, Stage, Individual ID, Clutch C...\ndbl  (7): Sample Number, Culmen Length (mm), Culmen Depth (mm), Flipper Leng...\ndate (1): Date Egg\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\nYour resulting data.frame should give the following counts:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(penguin_data$Species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n      Adelie Penguin (Pygoscelis adeliae) \n                                      152 \nChinstrap penguin (Pygoscelis antarctica) \n                                       68 \n        Gentoo penguin (Pygoscelis papua) \n                                      124 \n```\n\n\n:::\n:::\n\n\n\n\nEverything looks good, so we can save our combined data object to a new csv file. To keep our repository clean and organized, we'll make sure to save it in our \"data\" directory.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(penguin_data, \"data/penguin_data.csv\")\n```\n:::\n\n\n\n\n# Committing and pushing changes to GitHub\n\nNow we'll use the Git interface in RStudio to commit our new files to our forked GitHub repoitory. Click on the \"Git\" tab in the top right panel. Clicking this tab will show you all of the files that have been modified since we last committed. In this case, you should see a file created by RStudio for your project, your new \"penguins.R\" script, and your new \"penguins_data.csv\" data file.\n\n<img src=\"fig/git_panel.png\" width=\"600\"/>\n\nClick the boxes next to these three files to queue them for committing. Then click the <kbd>Commit</kbd> button. A new window should open where you can enter a commit message. Remember that commit messages should be both informative and concise. Once you are satisfied with your commit message, click the <kbd>Commit</kbd> button, and then <kbd>Push</kbd>. And that's that!\n\n<img src=\"fig/commit_panel.png\" width=\"600\"/>\n\n",
    "supporting": [
      "r-intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}