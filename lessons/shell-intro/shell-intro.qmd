---
title: "Working in the Unix Shell"
---
+---------------------------------+----------------------------------+
| ### Questions                   | ### Objectives                   |
+=================================+==================================+
| -   What is a command shell and | -   Explain how the shell        |
|     why would I use one?        |     relates to the keyboard, the |
|                                 |     screen, the operating        |
|                                 |     system, and users' programs. |
|                                 | -   Explain when and why         |
|                                 |     command-line interfaces      |
|                                 |     should be used instead of    |
|                                 |     graphical interfaces.        |
+---------------------------------+----------------------------------+
# Setup

## Installation

If you do not already have the shell software installed, you will need to
[download and install][install_shell] it. Follow the directions below for your operating system

::: {.callout-note appearance="simple" collapse="true"}

### Windows {#windows}
Computers with Windows operating systems do not automatically have a Unix Shell program
installed.
In this lesson, we encourage you to use an emulator included in [Git for Windows][install_shell],
which gives you access to both Bash shell commands and Git.

Once installed, you can open a terminal by running the program Git Bash from the Windows start
menu.

**For advanced users:**

As an alternative to Git for Windows you may wish to [Install the Windows Subsystem for Linux][wsl]
which gives access to a Bash shell command-line tool in Windows 10 and above.

Please note that commands in the Windows Subsystem for Linux (WSL) may differ slightly
from those shown in the lesson or presented in the workshop.

:::

::: {.callout-note appearance="simple" collapse="true"}

### MacOS {#macos}

For a Mac computer running macOS Mojave or earlier releases, the default Unix Shell is Bash.
For a Mac computer running macOS Catalina or later releases, the default Unix Shell is Zsh.
Your default shell is available via the Terminal program within your Utilities folder.

To open Terminal, try one or both of the following:

- In Finder, select the Go menu, then select Utilities.
  Locate Terminal in the Utilities folder and open it.
- Use the Mac 'Spotlight' computer search function.
  Search for: `Terminal` and press <kbd>Return</kbd>.

To check if your machine is set up to use something other than Bash,
type `echo $SHELL` in your terminal window.

If your machine is set up to use something other than Bash,
you can run it by opening a terminal and typing `bash`.

[How to Use Terminal on a Mac][mac-terminal]

:::

::: {.callout-note appearance="simple" collapse="true"}

### Linux {#linux}

The default Unix Shell for Linux operating systems is usually Bash.
On most versions of Linux, it is accessible by running the
[Gnome Terminal][gnome-terminal] or [KDE Konsole][kde-konsole] or [xterm],
which can be found via the applications menu or the search bar.
If your machine is set up to use something other than Bash,
you can run it by opening a terminal and typing `bash`.

:::


## Open a new shell

After installing the software:

1. Open a terminal.
  If you're not sure how to open a terminal on your operating system, see the instructions below.
2. In the terminal type `cd` then press the <kbd>Return</kbd> key.
  This step will make sure you start with your home folder as your working directory.

In the lesson, you will find out how to access the data files in this folder.

:::  {.callout-note appearance="simple"}

## Where to type commands: How to open a new shell

The shell is a program that enables us to send commands to the computer and receive output.
It is also referred to as the terminal or command line.

Some computers include a default Unix Shell program.
The steps below describe some methods for identifying and opening
a Unix Shell program if you already have one installed.
There are also options for identifying and downloading a Unix Shell program,
a Linux/UNIX emulator, or a program to access a Unix Shell on a server.

If none of the options below address your circumstances,
try an online search for: Unix shell [your computer model] [your operating system].
:::


[install_shell]: https://carpentries.github.io/workshop-template/install_instructions/#shell
[wsl]: https://learn.microsoft.com/en-us/windows/wsl/install
[mac-terminal]: https://www.macworld.co.uk/feature/mac-software/how-use-terminal-on-mac-3608274/
[gnome-terminal]: https://help.gnome.org/users/gnome-terminal/stable/
[kde-konsole]: https://konsole.kde.org/
[xterm]: https://en.wikipedia.org/wiki/Xterm

# Background

Humans and computers commonly interact in many different ways, such as
through a keyboard and mouse, touch screen interfaces, or using speech
recognition systems. The most widely used way to interact with personal
computers is called a **graphical user interface** (GUI). With a GUI, we
give instructions by clicking a mouse and using menu-driven
interactions.

While the visual aid of a GUI makes it intuitive to use, this way of
delivering instructions to a computer scales very poorly. Imagine the
following task: you have to copy the third line of one thousand text
files in one thousand different directories and paste it into a single
file. Using a GUI, you would not only be clicking at your desk for
several hours, but you could potentially also commit an error in the
process of completing this repetitive task. This is where we take
advantage of the Unix shell. **The Unix shell is both a command-line
interface (CLI) and a scripting language**, allowing such repetitive
tasks to be done automatically and fast. With the proper commands, the
shell can repeat tasks with or without some modification as many times
as we want. Using the shell, the task in the literature example can be
accomplished in seconds.

# The Shell

The shell is a program where users can type commands. With the shell,
it's possible to invoke complicated programs or simple commands with
only one line of code. The most popular Unix shell is Bash (the Bourne
Again SHell --- so-called because it's derived from a shell written by
Stephen Bourne). Bash is the default shell on most modern
implementations of Unix (with the exception of OSX where Zsh is default)
and in most packages that provide Unix-like tools for Windows. Note that
'Git Bash' is a piece of software that enables Windows users to use a
Bash like interface when interacting with Git.

Using the shell will take some effort and some time to learn. While a
GUI presents you with choices to select, CLI choices are not
automatically presented to you, so you must learn a few commands like
new vocabulary in a language you're studying. Luckily, a small number of
"words" (i.e. commands) gets you a long way, and we'll cover those
essential few today.

The grammar of a shell allows you to combine existing tools into
powerful pipelines and handle large volumes of data automatically.
Sequences of commands can be written into a *script*, improving the
reproducibility of workflows.

In addition, the command line is often the easiest way to interact with
remote machines and supercomputers. Familiarity with the shell is near
essential to run a variety of specialized tools and resources including
high-performance computing systems. As clusters and cloud computing
systems become more popular for scientific data crunching, being able to
interact with the shell is becoming a necessary skill. We can build on
the command-line skills covered here to tackle a wide range of
scientific questions and computational challenges.

Let's get started.

When the shell is first opened, you are presented with a **prompt**,
indicating that the shell is waiting for input.

``` bash
$
```

The shell typically uses `$` as the prompt, but may use a different
symbol. In the examples for this lesson, we'll show the prompt as `$`.
Most importantly, *do not type the prompt* when typing commands. Only
type the command that follows the prompt. This rule applies both in
these lessons and in lessons from other sources. Also note that after
you type a command, you have to press the <kbd>Enter</kbd> key to
execute it.

The prompt is followed by a **text cursor**, a character that indicates
the position where your typing will appear. The cursor is usually a
flashing or solid block, but it can also be an underscore or a pipe. You
may have seen it in a text editor program, for example.

Note that your prompt might look a little different. In particular, most
popular shell environments by default put your user name and the host
name before the `$`. Such a prompt might look like, e.g.:

``` bash
sklucas@localhost $
```

The prompt might even include more than this. Do not worry if your
prompt is not just a short `$`. This lesson does not depend on this
additional information and it should also not get in your way. The only
important item to focus on is the `$` character itself and we will see
later why.

So let's try our first command, `ls`, which is short for **listing**.
This command will list the contents of the current directory:

``` bash
$ ls
```

``` output
Desktop     Downloads   Movies      Pictures
Documents   Library     Music       Public
```

::: callout
# Command not found

If the shell can't find a program whose name is the command you typed,
it will print an error message such as:

``` bash
$ ks
```

``` output
ks: command not found
```

This might happen if the command was mis-typed or if the program
corresponding to that command is not installed.
:::

## A Typical Problem

TODO: Info here giving penguin background

In order to achieve our task, we need to know how to:

-   navigate to a file/directory
-   create a file/directory
-   check the length of a file
-   chain commands together
-   retrieve a set of files
-   iterate over files
-   run a shell script containing her pipeline

::: {#keypoints .callout-note appearance="simple"}
# Key Points

-   A shell is a program whose primary purpose is to read commands and
    run other programs.
-   This lesson uses Bash, the default shell in many implementations of
    Unix.
-   Programs can be run in Bash by entering commands at the command-line
    prompt.
-   The shell's main advantages are its high action-to-keystroke ratio,
    its support for automating repetitive tasks, and its capacity to
    access networked machines.
-   A significant challenge when using the shell can be knowing what
    commands need to be run and how to run them.
:::


# Working with directories

::: {#keypoints .callout-note appearance="simple"}
# Key Points

-   
:::

# Creating, moving, removing

::: {#keypoints .callout-note appearance="simple"}
# Key Points

-   
:::

# Linking commands using pipes

::: {#keypoints .callout-note appearance="simple"}
# Key Points

-   
:::

# Repeating commands using loops

::: {#keypoints .callout-note appearance="simple"}
# Key Points

-   
:::

# Writing scripts

::: {#keypoints .callout-note appearance="simple"}
# Key Points

-   
:::
