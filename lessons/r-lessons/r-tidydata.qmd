---
title: "R for Data Cleaning"
format: html
editor: 
  markdown: 
    wrap: 72
---

 
+----------------------------------+----------------------------------+
| ### Questions                    | ### Objectives                   |
+==================================+==================================+
| -   "How can I summarize my data | -   "To become familiar with the |
|     in R?"                       |     functions of `dplyr` and the |
| -   "How can R help make my      |     `tidyverse` suite of         |
|     research more reproducible?" |      packages."                  |
| -   "How can I combine two       | -   "To use `dplyr` and the      |
|     datasets from different      |     `tidyverse` packages to      |
|     sources?"                    |     prepare data for analysis."  |
| -   "How can data tidying        | -   "To be able to combine two   |
|     facilitate answering         |     different data sources using |
|     analysis questions?"         |     joins."                      |
|                                  | -   "To be able to create plots  |
|                                  |     and summary tables to answer |
|                                  |     analysis questions."         |
+----------------------------------+----------------------------------+


# Getting Started {#getting-started}

The [`tidyverse`](https://www.tidyverse.org/) is a collection of packages that facilitates data analysis in R. After installing the `tidyverse` with `install.packages("tidyverse")` (see the [intro session](r-intro.qmd)), you can load it with:


```{r}
library(tidyverse)
```


::: callout-tip
### Tip 
Upon loading, the `tidyverse` prints a message like the one above. Notice that multiple packages (the constituent elements of the "collection") are actually loaded. For instance, `dplyr` and `tidyr` help with data wrangling and transformation, while `ggplot2` allows us to draw plots, as you saw in the [last session](r-plotting.qmd). Often, one just loads the `tidyverse` and ignores these details, as the individual packages are compatible with each other.
:::

Throughout this module, we will use `tidyverse` functions to load, wrangle, and visualize real data.


# Loading data

As with the [intro session](r-intro.qmd), we'll be using the palmer penguins dataset. First, let's load the package, then save the raw data to an object using the assignment operator `<-`. Finally, inspect the raw data that is included using `glimpse()`. 

```{r}
library(palmerpenguins)
penguins_raw <- penguins_raw
glimpse(penguins_raw)
```

We can inspect our data by using the interface above. An alternative is to run the command `View(penguins_raw)` or click on the object in RStudio’s environment panel (in the top-right section).

Let’s review the dataset’s columns:  

- `studyName`: Sampling expedition from which data were collected, generated, etc.  
- `Sample Number`: an integer denoting the continuous numbering sequence for each sample 
- `Species`:  a character string denoting the penguin species  
- `Region`: a character string denoting the region of Palmer LTER sampling grid  
- `Island`: a character string denoting the island near Palmer Station where samples were collected  
- `Stage`:  a character string denoting reproductive stage at sampling  
- `Individual ID`: a character string denoting the unique ID for each individual in dataset  
- `Clutch Completion`: a character string denoting if the study nest observed with a full clutch, i.e., 2 eggs  
- `Date Egg`: a date denoting the date study nest observed with 1 egg (sampled) 
- `Culmen Length`: a number denoting the length of the dorsal ridge of a bird's bill (millimeters)  
- `Culmen Depth`: a number denoting the depth of the dorsal ridge of a bird's bill (millimeters)  
- `Flipper Length`: an integer denoting the length penguin flipper (millimeters)  
- `Body Mass`:  an integer denoting the penguin body mass (grams)  
- `Sex`: a character string denoting the sex of an animal  
- `Delta 15 N`: a number denoting the measure of the ratio of stable isotopes 15N:14N  
- `Delta 13 C`: a number denoting the measure of the ratio of stable isotopes 13C:12C  
- `Comments`: a character string with text providing additional relevant information for data  

You can read more about these variables by querying `?penguins_raw` and reading the **Help** documentation. 

The `tidyverse` facilitates the creation and use of *tidy data*. If you can get your data to this format (and we will see ways to do this), your life will be much easier:

![](fig/tidy_data.jpg)
![](fig/tidy_data2.jpg)

Source: Illustrations from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst.


# Wrangling data with `dplyr`

We often need to modify data to conduct our analyses, e.g., creating columns, filtering rows, etc. In the `tidyverse`, these operations are conducted with multiple *verbs*, which we will review now.

## Selecting columns

We can select specific columns in our dataset with the `select()` function. All `dplyr` wrangling verbs take a data frame as their first argument---in this case, the columns we want to select are the other arguments.

```{r}
select(penguins_raw, Species, Island, `Individual ID`)
```

This is a good moment to talk about "pipes." Notice how the code below produces the same output as the one above, but with a slightly different syntax. Pipes (`|>` or `%>%`) "kick" the object on the left of the pipe to the first argument of the function on the right. One can read pipes as "then," so the code below can be read as "take `penguins_raw`, then select the columns `Species`, `Island` and `Individual ID`." Pipes are very powerful and can be used to *link multiple operations*, as we will see in a moment.

```{r}
penguins_raw |> 
  select(Species, Island, `Individual ID`) 

```

::: callout-tip
### Tip
You can insert a pipe with the `Cmd/Ctrl + Shift + M` shortcut. If you have not changed the default RStudio settings, an "old" pipe (`%>%`) might appear. While most of the functionality is the same, the `|>` "new" pipes are more readable and don't need any extra packages (to use `%>%` you need the `tidyverse` or one of its packages). You can change this RStudio option in `Tools > Global Options > Code > Use native pipe operator`. 
:::

Going back to selecting columns, you can select ranges:

```{r}
penguins_raw |> 
  select(Species:`Individual ID`)
```

You can also **de**select columns using a minus sign:

```{r}
penguins_raw |> 
  select(-Species)
```

And use a few helper functions, like `matches()`:

```{r}
penguins_raw |> 
  select(Species, matches("Length"))
```

Or `everything()`, which we usually use to reorder columns:

```{r}
penguins_raw |> 
  select(Species, everything())
```

::: callout-tip
### Tip
Notice that all these commands have not edited our existent objects---they have just printed the requested outputs to the screen. In order to modify objects, you need to use the assignment operator (`<-`). For example:

```{r}
penguins_raw_reduced <- penguins_raw |> 
  select(Species, matches("Length"))
```

```{r}
penguins_raw_reduced
```
:::

:::: callout-note
#### Exercise

Select the variables `Species`, `Stage`, `Individual ID`, `Clutch Completion`, and `Date Egg` from the data frame.

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
##### Solution

```{r}
penguins_raw |> 
  select(Species, Stage, `Individual ID`, `Clutch Completion`, `Date Egg`)

```

:::
::::

## Renaming columns

We can use the `rename()` function to rename columns, with the syntax `new_name = old_name`. For example:

```{r}
penguins_raw |> 
  rename(id = `Individual ID`, 
         flipper_length = `Flipper Length (mm)`)
```

This is a good occasion to show how pipes allow us to chain operations. How do we read the following code out loud? (Remember that pipes are read as "then").

```{r}
penguins_raw |> 
  select(Species, `Individual ID`, matches("Length")) |> 
  rename(id = `Individual ID`, 
         flipper_length = `Flipper Length (mm)`)
```


## Creating columns

It is common to want to create columns based on existing ones. We can use `mutate()` to do so. For example, we could want to express the main length variables (length of the penguin's flipper and *culmen*, the dorsal ridge of their bill) in **centimeters** instead of **millimeters**:

```{r}
penguins_raw |> 
  select(Species, matches("Length")) |> # select just for clarity
    rename(flipper_length = `Flipper Length (mm)`) |>
  #mutate length variables
  mutate(flipper_length_cm = flipper_length * 0.1,
         culmen_length_cm = `Culmen Length (mm)` * 0.1)
```

We can also use multiple columns for creating a new one. For example, let's calculate the flipper to culmen length ratio: 

```{r}
penguins_raw |> 
 select(Species,  matches("Length")) |> # select just for clarity
    rename(flipper_length = `Flipper Length (mm)`) |>
  mutate(flipper_culmen_ratio = flipper_length/`Culmen Length (mm)`)
```

## Filtering rows

Another common operation is to filter rows based on logical conditions. We can do so with the `filter()` function. For example, we can filter to only get penguins of a certain species:

```{r}
penguins_raw |> 
  filter(Species == "Gentoo penguin (Pygoscelis papua)")
```

Notice that `==` here is a *logical operator*, read as "is equal to." So our full chain of operations says the following: take `penguins_raw`, then filter it to get rows where the Species is equal to "Gentoo penguin (Pygoscelis papua)".

There are other logical operators, also called **boolean** operators:

| Logical operator | Meaning                       |
|------------------|-------------------------------|
| `==`             | "is equal to"                 |
| `!=`             | "is not equal to"             |
| `>`              | "is greater than"             |
| `<`              | "is less than"                |
| `>=`             | "is greater than or equal to" |
| `<=`             | "is less than or equal to"    |
| `%in%`           | "is contained in"             |
| `&`              | "and" (intersection)          |
| `|`              | "or" (union)                  |

Let's see a couple of other examples.

```{r}
penguins_raw |> 
  filter(Island %in% c("Torgersen", "Biscoe"))
```

```{r}
penguins_raw |> 
  filter(Island == "Torgersen" & Sex == "MALE")
```

```{r}
penguins_raw |> 
  filter(`Flipper Length (mm)` > 200)
```


::: callout-note
#### Tip

Confused about when to use `filter()` and when to use `select()`? You use `filter()` to select *rows* (i.e., specific observations) with specific attributes, and you use `select()` to select *columns* (i.e., specific variables). To help keep it straight, remember that the letter **"c"** for column is in `select()` and the letter **"r"** for row is in `filter()`.

:::


:::: callout-note
#### Exercise

1.  Add a new column to the data frame, called `length_mass_ratio`, which calculates the ratio of the penguin's flipper length `Flipper Length (mm)` and their body mass `Body Mass (g)`. How would you calculate  `length_cm_mass_ratio`, where the flipper length is expressed as centimeters instead of millimeters? 

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
##### Solution

To calculate `length_mass_ratio`: 
```{r}
## Length to mass ratio:
penguins_raw |> 
 select(Species, `Body Mass (g)`, matches("Length")) |> # select just for clarity
    rename(flipper_length = `Flipper Length (mm)`) |>
  mutate(length_mass_ratio = flipper_length/`Body Mass (g)`)
```

There are two ways to calculate `length_cm_mass_ratio` in centimeters, you could either generate a new length variable in centimeters, or just apply the unit transformation to the ratio equation: 


```{r}
penguins_raw |> 
 select(Species, `Body Mass (g)`, matches("Length")) |> # select just for clarity
    rename(flipper_length = `Flipper Length (mm)`) |>
  mutate(flipper_cm = flipper_length * 0.1, 
      length_cm_mass_ratio = flipper_cm/`Body Mass (g)`)

penguins_raw |> 
 select(Species, `Body Mass (g)`, matches("Length")) |> # select just for clarity
    rename(flipper_length = `Flipper Length (mm)`) |>
  mutate(length_cm_mass_ratio = flipper_length/`Body Mass (g)` * 0.1)

```

:::

2.  Filter the data frame to only get penguins with nests observed with a fully completed clutch. 

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
##### Solution
```{r}
penguins_raw |> 
  filter(`Clutch Completion` == "Yes")

```
::: 


3.  Filter the data frame to only get penguins with nests observed with a fully completed clutch on the Island of Torgersen. 

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
##### Solution
```{r}
penguins_raw |> 
  filter(`Clutch Completion` == "Yes" & Island == "Torgersen")

```
:::

::::



## Ordering rows

The `arrange()` function allows us to order rows according to values. The default arranges from smallest to largest if numeric, or from A to Z if a character. For example, let's order based on the `Body Mass (g)` variable:

```{r}
penguins_raw |> 
  arrange(`Body Mass (g)`)
```

Maybe we only want penguins from the island of Biscoe. Remember that we can chain operations:

```{r}
penguins_raw |> 
  filter(Island == "Biscoe") |> 
  arrange(`Body Mass (g)`)
```

By default, `arrange()` uses increasing order (like `sort()`). To use decreasing order, add a minus sign:

```{r}
penguins_raw |> 
  filter(Island == "Biscoe") |> 
  arrange(-`Body Mass (g)`)
```

You can also order rows by more than one variable. What this does is to order by the first variable, and resolve any ties by ordering by the second variable (and so forth if you have more than two ordering variables). For example, let's first order our data frame by sex, and then within sex order by body mass:

```{r}
penguins_raw |> 
  filter(Island == "Biscoe") |> 
  arrange(Sex, `Body Mass (g)`)
```

:::: callout-note
#### Exercise

Arrange the data by `length_mass_ratio`, the ratio of the penguin's flipper length (in mm) and the penguin's body mass (in g). (You should have code on how to create this variable from the last exercise). 

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
##### Solution
```{r}
penguins_raw |> 
 select(Species, `Body Mass (g)`, matches("Length")) |> # select just for clarity
    rename(flipper_length = `Flipper Length (mm)`) |>
  mutate(length_mass_ratio = flipper_length/`Body Mass (g)`) |>
  arrange(length_mass_ratio)
```
:::

::::

## Summarizing data


`dplyr` makes summarizing data a breeze using the `summarize()` function:

```{r}
penguins_raw |> 
  summarize(mean_flipper_length = mean(`Flipper Length (mm)`),
            mean_body_mass = mean(`Body Mass (g)`))
```


::: callout-note
#### Tip 

Oh no! If you want to calculate the mean or do another arithmatic operation on a numeric vector and R returns `NA` values, it likely means that the vector has missing values. Use `na.rm = T` or one of the other operators you learned in the [intro session](r-intro.qmd) to drop the `NA` values in your calculation. 

:::


```{r}
penguins_raw |> 
  summarize(mean_flipper_length = mean(`Flipper Length (mm)`, na.rm = T),
            mean_body_mass = mean(`Body Mass (g)`, na.rm = T))
```


To make summaries, we can use any function that takes a vector and returns one value. Another example:

```{r}
penguins_raw |> 
  filter(`Clutch Completion` == "Yes") |> # to filter out penguins that did not have an (observed) full nest 
  summarize(max_flipper_length = max(`Flipper Length (mm)`, na.rm = T),
            min_flipper_length = min(`Flipper Length (mm)`, na.rm = T))
```

*Grouped summaries* allow us to disaggregate summaries according to other variables (usually categorical):

```{r}

penguins_raw |> 
  filter(`Clutch Completion` == "Yes") |> # to filter out penguins that did not have an (observed) full nest 
  summarize(max_flipper_length = max(`Flipper Length (mm)`, na.rm = T),
            min_flipper_length = min(`Flipper Length (mm)`, na.rm = T),
            .by = Sex)  #  to group by sex 
 


penguins_raw |> 
  filter(`Clutch Completion` == "Yes") |> # to filter out penguins that did not have an (observed) full nest 
  summarize(max_flipper_length = max(`Flipper Length (mm)`, na.rm = T),
            min_flipper_length = min(`Flipper Length (mm)`, na.rm = T),
            .by = Sex) |>  #  to group by sex 
  filter(is.na(Sex) == F) # to drop the penguins with an unknown sex 

```

:::: callout-note
#### Exercise

Obtain the maximum and minimum flipper length to mass ratio (call them `max_ratio` and `min_ratio`, drawing from the `length_mass_ratio` variable from before) for each penguin species. 

::: {.callout-caution collapse="true" appearance="simple" icon="false"}
##### Solution
```{r}

penguins_raw |> 
 select(Species, `Body Mass (g)`, matches("Length")) |> # select just for clarity
    rename(flipper_length = `Flipper Length (mm)`) |>
  mutate(length_mass_ratio = flipper_length/`Body Mass (g)`) |>
  # summarize flipper length to mass ratio by species
 summarize(max_ratio = max(length_mass_ratio, na.rm = T),
            min_ratio = min(length_mass_ratio, na.rm = T),
            .by = Species)   #  to group by species 

```

:::

::::

## Overview

| Function               | Purpose                      |
|------------------------|------------------------------|
| `select()`             | Select columns               |
| `rename()`             | Rename columns               |
| `mutate()`             | Creating columns             |
| `filter()`             | Filtering rows               |
| `arrange()`            | Ordering rows                |
| `summarize()`          | Summarizing data             |
| `summarize(…, .by = )` | Summarizing data (by groups) |




## Reviewing Git and GitHub - NOT COMPLETE

Now that we have our gapminder data prepared, let's use what we learned
about git and GitHub in the previous lesson to add, commit, and push our
changes.

Open Terminal/Git Bash, if you do not have it open already. First we'll
need to navigate to our un-report directory.

Let's start by print our current working directory and listing the items
in the directory, to see where we are.

